(* Print functions *)

(* Thread efficient printf *)
let scream fmt = Printf.kfprintf flush stdout fmt

(* Convertion functions *)
let stri i = string_of_int i
let strb b = if b then "T" else "F"
let stri' i' = match i' with
| None -> "None"
| Some i -> "Some " ^ (stri i)

let str2 l r = "(" ^ l ^ ", " ^ r ^ ")"

let strib (i, b) = str2 (stri i) (strb b)
let strii (i1, i2) = str2 (stri i1) (stri i2)
let strii' (i, i') = str2 (stri i) (stri' i')

let strii'_i ((i1, i'), i2) = str2 (strii' (i1, i')) (stri i2)

(* Just for debugging: *)
let () = begin
  Printexc.record_backtrace true;
  Ocamlbricks_log.enable ();
  end

(* End Print functions *)


open Cortex
open Cortex_lib


(* Resistances functions *)

(* Parrot *)
let onProposalParrot (v1, i1) (v2, i2) = match i1 with
| None -> (v2, Some 0)
| Some x -> (v2, Some (x + 1))

let returnP ?equalityAppend ?onProposalAppend ?onCommitAppend initValue = return
  ~equality:begin fun (v1, i1) (v2, i2) -> match equalityAppend with (* Not sure if working *)
    | None -> (v1, i1) = (v2, i2)
    | Some f -> f v1 v2 && i1 = i2
    end
  ~on_proposal:begin fun (v1, i1) (v2, i2) ->
    let (v3, i3) = onProposalParrot (v1, i1) (v2, i2) in
    let v3' = match onProposalAppend with
    | None -> v3
    | Some f -> f v1 v3
    in
    (v3', i3) end
  ~on_commit:begin fun (v1, i1) (v2, i2) -> 
    match onCommitAppend with
    | None -> ()
    | Some f -> f v1 v2
    end
  (initValue, Some 0)

let setP ?guard parrot value = set ?guard parrot (value, None)
(* TODO : guard for setP and getP *)
let getP ?guard parrot = 
  let v, i = get ?guard parrot in
  v

(* Trace *)
let onProposalTrace label toString v1 v2 v3 = 
  let () = scream "[%s] -prop- current:%s asked:%s answer:%s\n" label (toString v1) (toString v2) (toString v3) in
  v3

let onCommitTrace label toString v1 v2 = 
  scream "[%s] -commit- old:%s new:%s\n" label (toString v1) (toString v2)

(* End Resistances functions *)


(* Resistances definitions *)

let pidMesure = return 
  ~on_proposal:begin fun v1 v2 ->
    let v3 = v2 in
    onProposalTrace "pidMesure" stri v1 v2 v3 end
  ~on_commit:(onCommitTrace "pidMesure" stri)
  0

let pidOrder = view
  ~on_proposal:begin fun v1 v2 ->
    let v3 = v2 in
    onProposalTrace "pidOrder" stri v1 v2 v3 end
  ~on_commit:(onCommitTrace "pidOrder" stri)
  (fun x -> x)
  pidMesure

(* End Resistances definitions *)


(* Thread definitions *)

let pidMesureServer, _ = 
  let rec loop ch =
    let data = ch#input_line () in
    let () = 
      try 
        let mesure = (int_of_string data) in
        let () = scream "[pidMesureServer] : mesured %d\n" mesure in
        set pidMesure mesure
      with _ -> scream "[pidMesureServer] : strange data : \"%s\"\n" data 
    in
    loop ch
  in
  let protocol = loop in
  Network.stream_unix_server
    ~no_fork:()
    ~socketfile:"/tmp/turtle/py2caml/pidMesure"
    ~protocol
    ()

let pidOrderClient =
  let rec loop ch =
    let order = string_of_int (get pidMesure) in
    let () = 
      ch#output_line order ;
      scream "[pidOrderClient] : sent %s\n" order ;
      Thread.delay 0.1
    in
    loop ch
  in
  let protocol = loop in
  Network.stream_unix_client
    ~socketfile:"/tmp/turtle/caml2py/pidOrder"
    ~protocol
    ()

(* End Thread definitions *)

;;

print_endline "
----------------------------------------
PID Example of Communication with Python
----------------------------------------

---[Never forget]---
Use the argument '~no_fork:()' in 'stream_unix_server' !
Otherwise the resistances will be.. duplicated.

"